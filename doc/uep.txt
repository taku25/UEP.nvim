*UEP.txt* For UEP.nvim                          vim: ft=help

==============================================================================
CONTENTS                                                 *UEP-contents*

  1. Introduction................................. |UEP-introduction|
  2. Usage........................................ |UEP-usage|
     - Command List............................... |UEP-commands-list|
     - Command Details............................ |UEP-commands-detail|
  3. Configuration................................ |UEP-configuration|
     - Setup...................................... |UEP-setup|
     - Project-specific Settings (.unlrc.json)... |UEP-unlrc|
     - Full Configuration......................... |UEP-default-configuration|
  4. Lua API...................................... |UEP-api|
  5. Integration Examples (neo-tree).............. |UEP-integration-examples|
  6. License...................................... |UEP-license|

==============================================================================
1. Introduction                                     *UEP-introduction*

*UEP.nvim* (Unreal Engine Project Explorer) is a Neovim plugin designed to
understand and navigate the structure of Unreal Engine projects.

By asynchronously parsing and caching the module and file information for the
entire project, it provides an incredibly fast and intelligent file navigation
experience without blocking the UI.

It is a core plugin in the *Unreal Neovim Plugin Stack* and depends on the
*UNL.nvim* library as its foundation.

Main Features:
- Fast, Asynchronous Caching:
  Scans and caches information for game and engine modules in the background.
  It also allows sharing of the engine cache across multiple projects.
- Powerful File Search:
  Instantly search for files within your project by specifying the module
  scope (Game/Engine) and dependency depth (shallow/deep). Specialized
  commands are available for module-specific and Programs files.
- UI Abstraction Layer:
  Automatically selects and uses the best available UI, such as Telescope,
  fzf-lua, or the native Neovim UI, depending on your environment.
- Extensible API:
  Easily integrates with filer plugins like `neo-tree`.

==============================================================================
2. Usage                                                      *UEP-usage*

All commands for *UEP.nvim* begin with `:UEP`.

------------------------------------------------------------------------------
Command List                                           *UEP-commands-list*

:UEP refresh [Game|Engine]
    Updates the project cache.

:UEP files[!] [Game|Engine] [--no-deps|--all-deps]
    Searches for common source and config files using a UI.

:UEP module_files[!] [ModuleName]
    Searches for files belonging to a specific module.

:UEP program_files
    Searches for files within Programs directories.

:UEP grep [Game|Engine]
    LiveGrep across the project or engine source code.

:UEP module_grep [ModuleName]
    LiveGrep within a specific module.

:UEP program_grep
    LiveGrep for files within Programs directories.

:UEP open_file [Path]
    Open an include file by searching the project cache.

:UEP add_include[!] [ClassName]
    Finds and inserts the #include directive for a class.

:UEP find_derived [ClassName]
    Finds all derived classes of a specified base class.

:UEP find_parents [ClassName]
    Finds the inheritance chain for a specified class.

:UEP classes[!] [Game|Engine|Editor] [--no-deps|--all-deps]
    Searches for C++ classes within the specified scope.

:UEP structs[!] [Game|Engine|Editor] [--no-deps|--all-deps]
    Searches for C++ structs within the specified scope.

:UEP purge [ComponentName]
    Delete the file cache for a specified component (Game/Engine/Plugin).

:UEP cleanup
    Delete ALL structural and file caches for the current project.

:UEP tree [--no-deps|--all-deps]
    Displays a logical tree of the entire project. (Requires neo-tree-unl.nvim)

:UEP module_tree [ModuleName] [--no-deps|--all-deps]
    Displays a logical tree focused on a specific module. (Requires neo-tree-unl.nvim)

:UEP cd
    Selects a destination from a list of known projects to change to.

:UEP delete
    Deletes a project from the list of known projects.

:UEP goto_definition[!] [ClassName]
    Jumps to the actual class or struct definition file of a class, skipping forward declarations.

------------------------------------------------------------------------------
Command Details                                     *UEP-commands-detail*

:UEP refresh [Game|Engine]
    Scans the current project and updates the module and file cache. This is
    the most important command in this plugin.
    - `[Game|Engine]`: (Optional, default: `Game`)
      - `Game`: Scans only the modules of the current game project. If the
                cache for the associated engine does not exist, the engine
                will be scanned automatically first.
      - `Engine`: Scans only the modules of the associated engine.

:UEP files[!] [Game|Engine] [--no-deps|--all-deps]
    Opens a file search UI based on the cached information.
    - `[!](bang)`: (Optional)
      If `!` is added, it forces a regeneration of the cache before opening
      the UI. This is a shortcut for running `:UEP refresh` followed by
      `:UEP files`.
    - `[Game|Engine]`: (Optional, default: `Game`)
      Specifies the base scope of modules for the search.
    - `[--no-deps|--all-deps]`: (Optional, default: `--no-deps`)
      - `--no-deps`: Searches only within the modules of the base scope.
      - `--all-deps`: Includes all modules that the base scope's modules
                      depend on (including transitive dependencies) in the
                      search.

:UEP module_files[!] [ModuleName]
    Displays a list of files belonging to a specific module.
    - `[!](bang)`: (Optional)
      If `!` is added, it performs a lightweight update of only the specified
      module's file list before displaying the files.
    - `[ModuleName]`: (Optional)
      If omitted, a UI will open to select from all modules, and then the
      files for the selected module will be displayed.

:UEP program_files
    Searches for files within all Programs directories related to the
    project and engine (e.g., UnrealBuildTool, AutomationTool).

UEP grep [Game|Engine]
    Performs a live grep across project and engine source code (requires rg).
    - [Game|Engine]: (Optional, default: Game)
    - Game: Searches only your project's source files and plugins.
    - Engine: Includes the associated engine's source code in the search.

:UEP module_grep [ModuleName]
    Performs a live grep limited to the directory of a specific module.
    - [ModuleName]: (Optional)
    If omitted, a UI will open to select a module.

:UEP program_grep
    Performs a live grep for files within all `Programs` directories related to
    the project and engine. Useful for investigating the code of build tools
    and automation scripts.

:UEP open_file [Path]
    Finds and opens a file based on an include path.
    - `[Path]`: (Optional) The include path to search for. If omitted, the
      path will be extracted from the text on the current line (e.g., inside
      `"..."` or `<...>` includes). The search intelligently checks:
      1. Relative to the current file's directory.
      2. Relative to the current module's Public/Private directories.
      3. Within the current module's shallow and deep dependencies.
      4. Globally across the project cache (fallback).

:UEP add_include[!] [ClassName]
    Finds and inserts the correct #include directive for a C++ class based
    on the project cache.
    - `[!](bang)`: (Optional)
      If `!` is added, it ignores any arguments or the word under the
      cursor and opens a picker UI to select a class from the entire
      project.
    - `[ClassName]`: (Optional) The name of the class to include. If
      omitted, the word under the cursor (`<cword>`) is used.
    The command intelligently places the include directive:
      - In header files (`.h`), it is inserted before the `.generated.h` line.
      - In source files (`.cpp`), it is inserted after the last existing
        `#include` statement.

:UEP purge [ComponentName]
    Deletes only the **file cache** (`*.files.json`) for the specified component
    (Game, Engine, or a specific Plugin).
    This command runs asynchronously and requires confirmation.

:UEP cleanup
    **DANGEROUS**: Permanently deletes **ALL** structural caches
    (`*.project.json`) and **ALL** file caches (`*.files.json`) associated
    with the current project, including all plugins and the linked engine.
    This command runs asynchronously with a progress bar and requires confirmation.
    You **must** run |:UEP refresh| immediately afterwards to rebuild the cache.

:UEP find_derived [ClassName]
    Searches for all classes that inherit from a specified base class.
    - [ClassName]: (Optional) If omitted, a UI will open to select a
    base class from the entire project.

:UEP find_parents [ClassName]
    Displays the inheritance chain from a specified class up to `UObject`.
    - [ClassName]: (Optional) If omitted, a UI will open to select the
    starting class.

:UEP classes[!] [Game|Engine|Editor] [--no-deps|--all-deps]
    Displays a picker to select and jump to the definition of a C++ class.
    - **Usage**: Similar to |:UEP files|, this command filters the list of all
      known symbols by scope and dependency depth.
    - **`[Game|Engine|Editor]`**: (Optional, default: `Editor`) Specifies the
      base scope of modules for the search.
        - `Editor`: Scans all components (Game, Engine, Plugins), providing the richest
          set of Editor/Runtime symbols. (Equivalent to Full Scan).
    - `[--no-deps|--all-deps]`: (Optional, default: `--no-deps`)
        - `--no-deps`: Searches only within the specified scope's modules and their shallow dependencies.
        - `--all-deps`: Includes all modules that the base scope's modules depend on (deep dependencies).

:UEP structs[!] [Game|Engine|Editor] [--no-deps|--all-deps]
    Displays a picker to select and jump to the definition of a C++ struct.
    - **Usage**: Behaves identically to |:UEP cl

:UEP tree [--no-deps|--all-deps]
    Opens a logical project explorer in neo-tree. Requires neo-tree-unl.nvim.
    The view includes Game, Plugins, and Engine components.
    - [--no-deps|--all-deps]: (Optional) Controls which dependent modules
    are displayed within the tree.

:UEP module_tree [ModuleName] [--no-deps|--all-deps]
    Opens a logical tree focused on a single module or its dependencies.
    Requires neo-tree-unl.nvim.
    - [ModuleName]: (Optional) If omitted, a UI will open to select a module.

:UEP cd
    Displays a UI with a list of known cached projects and changes the current
    directory to the root of the selected project.

:UEP delete
    Displays a UI with a list of known projects and removes the selected
    project from the list. The actual project files are not deleted.

:UEP goto_definition[!] [ClassName]
    Jumps to the actual definition file of a class, skipping forward
    declarations.
    - `[!](bang)`: (Optional)
      If `!` is added, it ignores any arguments or the word under the
      cursor and opens a picker UI to select a class from the entire
      project to jump to.
    - `[ClassName]`: (Optional) The name of the class to jump to. If
      omitted, the word under the cursor (`<cword>`) is used.
    This command performs an intelligent hierarchical search based on the
    current module's dependencies (current component -> shallow deps ->
    deep deps) and falls back to LSP if not found.

==============================================================================
3. Configuration                                       *UEP-configuration*

The configuration for *UEP.nvim* is managed through the settings system of its
dependency library, *UNL.nvim*.

------------------------------------------------------------------------------
Setup                                                          *UEP-setup*

If you are using `lazy.nvim`, pass a configuration table to the `opts` key. It
is mandatory to specify `UNL.nvim` in the `dependencies` of `UEP.nvim`.

Example:
>lua
  return {
    'taku25/UEP.nvim',
    dependencies = { 'taku25/UNL.nvim' },
    opts = {
      -- Configure UEP through UNL.nvim
      files_extensions = { "cpp", "h", "hpp", "inl", "ini", "cs", "uproject" },
      ui = {
        picker = { mode = "telescope" },
      },
    },
  }
<

For details on available options, see |UEP-default-configuration|.

------------------------------------------------------------------------------
Project-specific Settings (.unlrc.json)                  *UEP-unlrc*

By creating a JSON file named `.unlrc.json` in the root directory of your
project, you can override global settings for that project only. This feature
is provided by *UNL.nvim*.

Example:
>json
  {
    "files_extensions": [ "cpp", "h", "ini", "cs", "md" ]
  }
<

------------------------------------------------------------------------------
Full Configuration                           *UEP-default-configuration*

The following are all configurable options related to *UEP.nvim* with their
default values. These settings are treated as part of the *UNL.nvim*
configuration table.

>lua
{
  -- File extensions to be scanned by the ':UEP refresh' command
  files_extensions = {
    "cpp", "h", "hpp", "inl", "ini", "cs",
  },
  -- Manually specify the engine path if automatic detection fails.
  -- Example: "C:/Program Files/Epic Games/UE_5.4"
  engine_path = nil,

  -- UI backend settings (inherited from UNL.nvim)
  ui = {
    picker = {
      mode = "auto", -- "auto", "telescope", "fzf_lua", "native"
      prefer = { "telescope", "fzf_lua", "native" },
    },
    progress = {
      enable = true,
      mode = "auto", -- "auto", "fidget", "window", "notify"
      prefer = { "fidget", "window", "notify" },
    },
  },
}
<

==============================================================================
4. Lua API                                                     *UEP-api*

*UEP.nvim* provides a simple API for external integration. You can call functions
similar to the commands directly from Lua.

Require the API module:
>lua
  local uep_api = require("UEP.api")
<

*uep_api.refresh({opts})*
    Updates the cache.
    `opts` table:
      - `type` (string, optional): `"Game"` or `"Engine"`.

*uep_api.files({opts})*
    Opens the file search UI.
    `opts` table:
      - `has_bang` (boolean, optional): If `true`, forces cache refresh.
      - `category` (string, optional): `"Game"`, `"Engine"`, `"All"`, etc.
      - `deps_flag` (string, optional): `"--all-deps"`, etc.

*uep_api.module_files({opts})*
    Opens the module file search UI.
    `opts` table:
      - `has_bang` (boolean, optional): If `true`, performs a lightweight
        update of the module cache.
      - `module_name` (string, optional): Directly specify the module name.

*uep_api.grep({opts})*
    Opens the live grep UI. opts can specify category ("Game", "Engine").

*uep_api.module_grep({opts})*
    Opens the live grep UI for a specific module. opts can specify module_name.

*uep_api.program_grep({opts})*
    Opens the live grep UI for `Programs` directories. opts is not currently
    used.


*uep_api.tree({opts})*
    Opens the logical project tree. opts can specify deps_flag.

*uep_api.module_tree({opts})*
    Opens the logical module tree. opts can specify module_name and deps_flag.

*uep_api.cd({opts})*
    Opens the project selection UI. opts is not currently used.

*uep_api.delete({opts})*
    Opens the project deletion UI. opts is not currently used.

*uep_api.open_file({opts})*
    Finds and opens an include file using intelligent search.
    `opts` table:
      - `path` (string, optional): The include path to search for. If
        omitted, it is extracted from the current line.

*uep_api.add_include({opts})*
    Programmatically inserts an #include directive.
    `opts` table:
      - `has_bang` (boolean, optional): If `true`, forces the picker UI.
      - `class_name` (string, optional): The name of the class to include.

*uep_api.goto_definition({opts})*
    Intelligently finds and jumps to the definition file of a class, skipping
    forward declarations and searching through dependencies.
    `opts` table:
      - `has_bang` (boolean, optional): `true` forces the class picker UI.
      - `class_name` (string, optional): The class name to jump to. If
        omitted and `has_bang` is false, uses the word under the cursor.

==============================================================================
5. Integration Examples (neo-tree)         *UEP-integration-examples*

By using the `UEP.api`, you can call the features of UEP.nvim directly from
`neo-tree`.

Example: Key mappings for neo-tree
>lua
  -- ... (in your neo-tree setup) ...
  filesystem = {
    window = {
      mappings = {
        -- Open project file search UI with <leader>pf
        ["<leader>pf"] = function(state)
          local node = state.tree:get_node()
          local path = node.type == "directory" and node.path or vim.fs.dirname(node.path)
          -- Set CWD inside the project before calling the API
          vim.api.nvim_set_current_dir(path)
          require("UEP.api").files({})
        end,
        -- Open a module in the filer with <leader>pt
        ["<leader>pt"] = function(state)
          local node = state.tree:get_node()
          local path = node.type == "directory" and node.path or vim.fs.dirname(node.path)
          vim.api.nvim_set_current_dir(path)
          require("UEP.api").tree({})
        end,
      },
    },
  },
  -- ...
<

==============================================================================
6. License                                                *UEP-license*

MIT License

Copyright (c) 2025 taku25

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
