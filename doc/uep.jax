*UEP.jax* For UEP.nvim                          vim: ft=help

==============================================================================
目次                                                     *UEP-contents*

  1. はじめに..................................... |UEP-introduction|
  2. 使い方....................................... |UEP-usage|
     - コマンド一覧............................... |UEP-commands-list|
     - コマンド詳細............................... |UEP-commands-detail|
  3. 設定......................................... |UEP-configuration|
     - セットアップ............................... |UEP-setup|
     - プロジェクト固有の設定 (.unlrc.json)....... |UEP-unlrc|
     - フルコンフィグ............................. |UEP-default-configuration|
  4. Lua API...................................... |UEP-api|
  5. 連携サンプル (neo-tree)...................... |UEP-integration-examples|
  6. ライセンス................................... |UEP-license|

==============================================================================
1. はじめに                                         *UEP-introduction*

*UEP.nvim* (Unreal Engine Project Explorer) は、Unreal Engineプロジェクトの
構造を理解し、ナビゲートするために設計されたNeovimプラグインです。

プロジェクト全体のモジュールとファイル情報を非同期で解析・キャッシュすることで、
UIをブロックすることなく、非常に高速でインテリジェントなファイルナビゲーション
体験を提供します。

これは *Unreal Neovim Plugin Stack* の中核をなすプラグインであり、基盤ライブ
ラリとして *UNL.nvim* に依存しています。

主な機能:
- 高速な非同期キャッシング:
  ゲームとエンジンモジュールの情報をバックグラウンドでスキャンし、キャッシュ
  します。複数のプロジェクトでエンジンキャッシュを共有することも可能です。
- 強力なファイル検索:
  モジュールのスコープ（Game/Engine）や依存関係を指定して、プロジェクト内の
  ファイルを瞬時に検索できます。モジュールやProgramsファイルに特化した検索
  コマンドも利用可能です。
- UI抽象化レイヤー:
  Telescope, fzf-lua, またはNeovim標準UIを、環境に応じて自動で選択・使用
  します。
- 拡張性の高いAPI:
  `neo-tree`のようなファイラープラグインと簡単に連携できます。

==============================================================================
2. 使い方                                                      *UEP-usage*

*UEP.nvim* のコマンドはすべて `:UEP` から始まります。

------------------------------------------------------------------------------
コマンド一覧                                           *UEP-commands-list*

:UEP refresh [Game|Engine]
  プロジェクトのキャッシュを更新します。

:UEP files[!] [Game|Engine] [--no-deps|--all-deps]
  日常的に使うソースや設定ファイルをUIで検索します。

:UEP module_files[!] [ModuleName]
  指定したモジュールに属するファイルを検索します。

:UEP program_files
  Programsディレクトリ内のファイルを検索します。

:UEP grep [Game|Engine]
  プロジェクトまたはエンジン全体からLiveGrepします。

:UEP module_grep [ModuleName]
  特定のモジュール内をLiveGrepします。

:UEP program_grep
  Programsディレクトリ内のファイルをLiveGrepします。

:UEP open_file [Path]
  プロジェクトキャッシュを検索して、インクルードファイルを開きます。

:UEP find_derived [ClassName]
  指定した基底クラスの全ての派生クラスを検索します。

:UEP find_parents [ClassName]
  指定したクラスの継承チェーンを検索します。

:UEP purge [ComponentName]
  特定のコンポーネントのファイルキャッシュのみを削除します。

:UEP cleanup
  現在のプロジェクトの全ての構造キャッシュとファイルキャッシュを削除します。

:UEP tree [--no-deps|--all-deps]
  プロジェクト全体の論理ツリーを表示します。(neo-tree-unl.nvim が必要)

:UEP module_tree [ModuleName] [--no-deps|--all-deps]
  特定のモジュールにフォーカスした論理ツリーを表示します。(neo-tree-unl.nvim が必要)

:UEP cd
  既知のプロジェクト一覧から移動先を選択します。

:UEP delete
  既知のプロジェクト一覧からプロジェクトを削除します。

------------------------------------------------------------------------------
コマンド詳細                                         *UEP-commands-detail*

:UEP refresh [Game|Engine]
    現在のプロジェクトをスキャンし、モジュールとファイルのキャッシュを更新しま
    す。このプラグインで最も重要なコマンドです。
    - `[Game|Engine]`: (省略可、デフォルト: `Game`)
      - `Game`: 現在のゲームプロジェクトのモジュールのみスキャンします。
                関連するエンジンのキャッシュが存在しない場合は、先にエンジン
                のスキャンが自動的に実行されます。
      - `Engine`: 関連するエンジンのモジュールのみをスキャンします。

:UEP files[!] [Game|Engine] [--no-deps|--all-deps]
    キャッシュされた情報に基づいて、ファイル検索UIを開きます。
    - `[!](bang)`: (省略可)
      `!`を付けると、キャッシュを強制的に再生成してからUIを開きます。
      これは `:UEP refresh` を実行してから `:UEP files` を実行する
      ショートカットです。
    - `[Game|Engine]`: (省略可、デフォルト: `Game`)
      検索のベースとなるモジュールのスコープを指定します。
    - `[--no-deps|--all-deps]`: (省略可、デフォルト: `--no-deps`)
      - `--no-deps`: ベーススコープのモジュールのみを検索対象とします。
      - `--all-deps`: ベーススコープのモジュールが依存する全てのモジュール
                      （推移的依存関係を含む）を検索対象とします。

:UEP module_files[!] [ModuleName]
    特定のモジュールに属するファイル一覧を表示します。
    - `[!](bang)`: (省略可)
      `!`を付けると、指定したモジュールのファイルリストのみを軽量に更新
      してからファイル一覧を表示します。
    - `[ModuleName]`: (省略可)
      省略した場合、全モジュールを選択するUIが開き、選択後にそのモジュー
      ルのファイルが表示されます。

:UEP program_files
    プロジェクトとエンジンに関連する全てのProgramsディレクトリ
    （例: UnrealBuildTool, AutomationTool）内のファイルを検索します。

:UEP grep [Game|Engine]
    プロジェクトとエンジンのソースコード全体からLiveGrepします (rgが必須)。
    - [Game|Engine]: (省略可、デフォルト: Game)
    - Game: あなたのプロジェクトのソースファイルとプラグインのみを検索します。
    - Engine: 関連付けられたエンジンのソースコードも検索に含めます。

:UEP module_grep [ModuleName]
    特定のモジュールのディレクトリ内に限定してLiveGrepします。
    - [ModuleName]: (省略可) 省略した場合、モジュールを選択するUIが開きます。

:UEP program_grep
    プロジェクトとエンジンに関連する全てのProgramsディレクトリ内のファイルを
    LiveGrepします。ビルドツールや自動化スクリプトのコードを調査する際に
    便利です。

:UEP open_file [Path]
    インクルードパスに基づいてファイルを検索し、開きます。
    - `[Path]`: (省略可) 検索対象のインクルードパス。省略した場合、現在の行
      のテキスト（例: `"`...`"` や `<`...`>` 内）からパスを抽出します。
      以下の優先順位でインテリジェントに検索されます:
      1. 現在のファイルがあるディレクトリからの相対パス。
      2. 現在のモジュールの Public/Private ディレクトリからの相対パス。
      3. 現在のモジュールの浅い依存関係および深い依存関係内。
      4. プロジェクトキャッシュ全体（フォールバック）。

:UEP purge [ComponentName]
    指定されたコンポーネント（Game/Engine/Plugin）の**ファイルキャッシュ**
    （`*.files.json`）のみを削除します。
    このコマンドは非同期で実行され、実行には確認が必要です。

:UEP cleanup
    **危険**: 現在のプロジェクトに関連する**全て**の構造キャッシュ 
    （`*.project.json`）および**全て**のファイルキャッシュ（`*.files.json`）を
    永久に削除します（プラグインやリンクされたエンジンも含む）。
    このコマンドはプログレスバーを表示しながら非同期で実行され、実行には確認が
    必要です。実行後、キャッシュを再構築するために**必ず** |UEP refresh| を
    実行してください。

:UEP find_derived [ClassName]
    指定した基底クラスを継承する全てのクラスを検索します。
    - [ClassName]: (省略可) 省略した場合、プロジェクト全体のクラスから基底
    クラスを選択するUIが開きます。

:UEP find_parents [ClassName]
    指定したクラスから `UObject` に至るまでの継承チェーンを表示します。
    - [ClassName]: (省略可) 省略した場合、起点となるクラスを選択するUIが
    開きます。

:UEP tree [--no-deps|--all-deps]
    neo-treeで論理的なプロジェクトエクスプローラーを開きます。
    neo-tree-unl.nvim が必要です。ビューにはGame、Plugins、Engineの
    コンポーネントが含まれます。
    - [--no-deps|--all-deps]: (省略可) ツリー内に表示される依存モジュール
    を制御します。

:UEP module_tree [ModuleName] [--no-deps|--all-deps]
    単一のモジュールまたはその依存関係にフォーカスした論理ツリーを開きます。
    neo-tree-unl.nvim が必要です。
    - [ModuleName]: (省略可) 省略した場合、モジュールを選択するUIが開きます。

:UEP cd
    キャッシュされている既知のプロジェクト一覧をUIで表示し、選択したプロジェ
    クトのルートディレクトリにカレントディレクトリを変更します。

:UEP delete
    既知のプロジェクト一覧をUIで表示し、選択したプロジェクトを一覧から削除し
    ます。実際のプロジェクトファイルは削除されません。

==============================================================================
3. 設定                                           *UEP-configuration*

*UEP.nvim* の設定は、依存ライブラリである *UNL.nvim* の設定システムを通じて
行われます。

------------------------------------------------------------------------------
セットアップ                                                   *UEP-setup*

`lazy.nvim`を使っている場合、`opts`キーに設定テーブルを渡します。`UEP.nvim`
の `dependencies` に `UNL.nvim` を指定することが必須です。

例:
>lua
  return {
    'taku25/UEP.nvim',
    dependencies = { 'taku25/UNL.nvim' },
    opts = {
      -- UNL.nvimを通じてUEPの設定を行う
      files_extensions = { "cpp", "h", "hpp", "inl", "ini", "cs", "uproject" },
      ui = {
        picker = { mode = "telescope" },
      },
    },
  }
<

利用可能なオプションの詳細は |UEP-default-configuration| を参照してください。

------------------------------------------------------------------------------
プロジェクト固有の設定 (.unlrc.json)                      *UEP-unlrc*

プロジェクトのルートディレクトリに`.unlrc.json`という名前のJSONファイルを作成
することで、グローバルな設定をそのプロジェクトでのみ上書きできます。この機能は
*UNL.nvim* によって提供されています。

例:
>json
  {
    "files_extensions": [ "cpp", "h", "ini", "cs", "md" ]
  }
<

------------------------------------------------------------------------------
フルコンフィグ                               *UEP-default-configuration*

以下は、*UEP.nvim* に関連する設定可能なすべてのオプションと、そのデフォルト値
です。これらの設定は *UNL.nvim* の設定テーブルの一部として扱われます。

>lua
{
  -- ':UEP refresh' コマンドによってスキャンされるファイルの拡張子
  files_extensions = {
    "cpp", "h", "hpp", "inl", "ini", "cs",
  },

  -- UIバックエンドの設定 (UNL.nvimから継承)
  ui = {
    picker = {
      mode = "auto", -- "auto", "telescope", "fzf_lua", "native"
      prefer = { "telescope", "fzf_lua", "native" },
    },
    progress = {
      enable = true,
      mode = "auto", -- "auto", "fidget", "window", "notify"
      prefer = { "fidget", "window", "notify" },
    },
  },
}
<

==============================================================================
4. Lua API                                                     *UEP-api*

`UEP.nvim`は、外部連携のためにシンプルなAPIを提供します。コマンドと同様の機能
をLuaから直接呼び出すことができます。

APIモジュールを`require`する:
>lua
  local uep_api = require("UEP.api")
<

*uep_api.refresh({opts})*
    キャッシュを更新します。
    `opts`テーブル:
      - `type` (string, optional): `"Game"` または `"Engine"`。

*uep_api.files({opts})*
    ファイル検索UIを開きます。
    `opts`テーブル:
      - `has_bang` (boolean, optional): `true`でキャッシュを強制更新。
      - `category` (string, optional): `"Game"`, `"Engine"`, `"All"`など。
      - `deps_flag` (string, optional): `"--all-deps"`など。

*uep_api.module_files({opts})*
    モジュールファイル検索UIを開きます。
    `opts`テーブル:
      - `has_bang` (boolean, optional): `true`でモジュールキャッシュを軽量更新。
      - `module_name` (string, optional): モジュール名を直接指定。

*uep_api.program_files({opts})*
    プログラムファイル検索UIを開きます。optsは現在使用されません。

*uep_api.grep({opts})*
    LiveGrepのUIを開きます。optsでcategory ("Game", "Engine") を指定
    できます。

*uep_api.module_grep({opts})*
    特定モジュールのLiveGrep UIを開きます。optsでmodule_nameを指定できます。

*uep_api.program_grep({opts})*
    Programsディレクトリを対象としたLiveGrep UIを開きます。optsは現在使用
    されません。

*uep_api.tree({opts})*
    論理プロジェクトツリーを開きます。optsでdeps_flagを指定できます。

*uep_api.module_tree({opts})*
    論理モジュールツリーを開きます。optsでmodule_nameとdeps_flagを
    指定できます。

*uep_api.cd({opts})*
    プロジェクト選択UIを開きます。optsは現在使用されません。

*uep_api.delete({opts})*
    プロジェクト削除UIを開きます。optsは現在使用されません。

==============================================================================
5. 連携サンプル (neo-tree)                 *UEP-integration-examples*

`UEP.api` を使うことで、`neo-tree`から直接UEP.nvimの機能を呼び出すことが
できます。

例: neo-treeのキーマッピング設定
>lua
  -- ... (neo-treeのセットアップ) ...
  filesystem = {
    window = {
      mappings = {
        -- <leader>pf でプロジェクトファイル検索UIを開く
        ["<leader>pf"] = function(state)
          local node = state.tree:get_node()
          local path = node.type == "directory" and node.path or vim.fs.dirname(node.path)
          -- APIを呼ぶ前にCWDをプロジェクト内に設定
          vim.api.nvim_set_current_dir(path)
          require("UEP.api").files({})
        end,
        -- <leader>pt でモジュールをファイラーで開く
        ["<leader>pt"] = function(state)
          local node = state.tree:get_node()
          local path = node.type == "directory" and node.path or vim.fs.dirname(node.path)
          vim.api.nvim_set_current_dir(path)
          require("UEP.api").tree({})
        end,
      },
    },
  },
  -- ...
<

==============================================================================
6. ライセンス                                                *UEP-license*

MIT License

Copyright (c) 2025 taku25

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
